<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TagApp</name>
    </assembly>
    <members>
        <member name="M:TagApp.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:TagApp.Template">
            <summary>
            każdy obiekt typu template <see cref="T:TagApp.Template"/> Posiada w sobie(na razie):
                - Format szablonu
            </summary>
        </member>
        <member name="F:TagApp.MainWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TagApp.MainWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TagApp.MainWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TagApp.OurDirectory">
            <summary>
            Obiekt klasy Directory byłby abstrakcyjną reprezentacją folderu podanego do programu. Szczerze nie jestem pewien
            czy takie obiekty będą nam potrzebne. Mogłyby trzymać różne informację, które byłyby nam potrzebne z folderu jak np ilość
            plików w. Poza tym załatwiłyby rozróżnienie folderu obiektów Mp3File, a samego pliku.
            </summary>
        </member>
        <member name="T:TagApp.Mp3File">
            <summary>
            Obiekt klasy Mp3File byłby abstrakcyjną reprezentacją rzeczywistego pliku mp3 z dysku. Na nim odbywałyby się wszystkie
            operacje edycji tagów itp. Następnie zmiany zapisywane byłyby na dysk do pliku. Będzie agregowal obiekt Taglib (?) 
            Nie ogarnalem jeszcze tej biblio tak, zeby kumac jak działa
            
            </summary>
        </member>
        <member name="T:TagApp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TagApp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TagApp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
